#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, dgtl1,  button1,        sensorTouch)
#pragma config(Sensor, dgtl2,  button2,        sensorTouch)
#pragma config(Sensor, dgtl4,  button3,        sensorTouch)
#pragma config(Sensor, I2C_1,  motor1,         sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Motor,  port1,           motor1,        tmotorVex393_HBridge, openLoop, encoderPort, I2C_1)
#pragma config(Motor,  port2,           claw,          tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           arm,           tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          motor2,        tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

// WHEN YOU FINISH EACH EXERCISE, INCREMENT THIS VALUE


bool button1_pushed; //flag to store button1 input
bool button2_pushed; //flag to store button2 input
bool button3_pushed; //flag to store button3 input

/* monitorInput()
*
*  Used to flag button inputs
*       - this avoids errors caused by program recognizing input, taking action, and
*         reading input again before button is released
*/
void monitorInput()
{
   if(SensorValue(button1) && !button1_pushed && !button3_pushed)
   {
      button1_pushed = true;
   }

   if(SensorValue(button2) && !button2_pushed && !button3_pushed)
   {
      button2_pushed = true;
   }
   if(SensorValue(button3) && !button1_pushed && !button2_pushed)
   {
      button3_pushed = true;
   }
}
task main()
{
enum T_exercise1_state {
      MOTOR_STOP = 0,
      MOTOR_RUNNING,
      ROBOT_TURNS,
      NODE
   };
button1_pushed = button2_pushed = button3_pushed = false;
T_exercise1_state exercise1_state = MOTOR_STOP;
   while(true) {
      monitorInput();


      switch(exercise1_state){

      case MOTOR_STOP:

      motor [motor1] = 0;
      motor [motor2] = 0;
      //Robot stops

// reset any other needed motor encoders here
      resetMotorEncoder(motor1);

      if (button1_pushed){
         exercise1_state = MOTOR_RUNNING;
         button1_pushed = false;
} //end if

      if(button2_pushed){
      exercise1_state = ROBOT_TURNS;
      button2_pushed = false;
} // end if

      if(button3_pushed){
      exercise1_state = NODE;
      button3_pushed = false;
} //end if

      break;

      case MOTOR_RUNNING:
         motor [motor1] = 40;
         motor [motor2] = 40;
         //Robot goes forwards

      if (getMotorEncoder(motor1) > 1000){
      exercise1_state = MOTOR_STOP;
      } //end if
      break;

      case ROBOT_TURNS:
         motor [motor1] = 40;
         motor [motor2] = -40;
         //Robot turns

      if (getMotorEncoder(motor1) > 208){
      exercise1_state = MOTOR_STOP;
      }
      break;

      case NODE:
      motor [claw] = 30;
      wait1Msec(2500);
      motor [claw] = 0;
      //Open claw
/*
      motor [arm] = 30;
      wait1Msec(1000);
      motor [arm] = 0;
      //Lower arm

      motor [motor1] = 40;
      motor [motor2] = -40;
      wait1Msec(3000);
      //Turn left

      motor [motor1] = 0;
      motor [motor2] = 0;
      wait1Msec(1000);
      //Wait One second

      motor [motor1] = -40;
      motor [motor2] = -40;
      wait1Msec(2000);
      //Move backwards
*/
      exercise1_state = MOTOR_STOP;
      break;

      default:

} // end switch
}// end main
}//end while

